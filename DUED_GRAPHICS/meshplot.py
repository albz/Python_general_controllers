#!/usr/bin/python
######################################################################
# Name:         meshplot2.py
# Author:       A. Marocchino
# Date:			2013 08
# Purpose:      evolution of the first attempt to python porting of DI
# Source:       python
#####################################################################


### --- ###
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.path import Path
from matplotlib.transforms import Bbox
from matplotlib.spines import Spine
from matplotlib.lines import Line2D
from math import pi,cos,sin,tan
import sys
### --- ###
from dued_read_frm import *
### --- ###


### --- ###

### --- ###


def onKeyPressed(event):
	global ni,nj,fig
	global lGrid,lEqualScales,lDrawColorMesh
	if(event.key == 'q'):
		exit(0)
	elif (event.key == '['):
		ni= max(3,ni-1)
# 		print 'ni,nj=',ni,nj
	elif (event.key == ']'):
		ni+=1
# 		print 'ni,nj=',ni,nj
	elif (event.key == '-'):
		nj= max(1,nj-1)
# 		print 'ni,nj=',ni,nj
	elif (event.key == '='):
		nj+=1
# 		print 'ni,nj=',ni,nj
	elif (event.key == 'b'):
		toggle_bkgd()
	elif (event.key == 'g'):
		lGrid = not lGrid
	elif (event.key == 'd'):
		drawFilledColorMesh()
		#lDrawColorMesh = not lDrawColorMesh
	elif (event.key == 'i' or event.key == 'I'):
		zoomViewport(-0.25)
	elif (event.key == 'o' or event.key == 'O'):
		zoomViewport( 0.25)
	elif (event.key == 'right'):
		panViewport(0.25,0)
	elif (event.key == 'left'):
		panViewport(-0.25,0)
	elif (event.key == 'up'):
		panViewport(0,0.25)
	elif (event.key == 'down'):
		panViewport(0,-0.25)
	elif (event.key == 'c'):
		if event.inaxes:
			centerViewport(event.xdata,event.ydata)
	elif (event.key == 'z'):
		lEqualScales = not lEqualScales

# 	print '>>>> ready to replot'
#   	replot()
# 	plt.show()		
#  	fig.gca().set_title('ni,nj = %3d, %3d' % (ni,nj),color=fc)
#  	fig.canvas.draw()
	
def replot():
	global ax,fc
	global rrange,zrange
	global lGrid,lDrawColorMesh
	ax.clear()
	drawFilledColorMesh()
	setAxisLimit()
	drawAxisLimit()
# 	if lEqualScales:
# 		setEqualScales()
#  	ax.set_xlim(zrange)
#  	ax.set_ylim(rrange)
#  	ax.grid(color=fc)
#  	ax.grid(lGrid)


def toggle_bkgd():
	global bc,fc
	global fig
	bc = 'k' if bc == 'w' else 'w'
	fc = 'k' if bc == 'w' else 'w'
	fig.set_facecolor(bc)
	for ax in fig.get_axes():
		ax.set_axis_bgcolor(bc)
		ax.xaxis.set_tick_params(color=fc)
		ax.yaxis.set_tick_params(color=fc)
		ax.xaxis.set_tick_params(labelcolor=fc)
		ax.yaxis.set_tick_params(labelcolor=fc)
        for child in ax.get_children():
			if isinstance(child, Spine):
				child.set_color(fc)	

def setViewport(zmin,zmax,rmin,rmax):
	global zrange,rrange
	zrange = [zmin,zmax]
	rrange = [rmin,rmax]

def setAxisLimit(*arg): #zmin,zmax,rmin,rmax):
	global zrange,rrange
	if len(arg) == 4:
		zrange = [arg[0],arg[1]]
		rrange = [arg[2],arg[3]]
	else:
		zrange = [z.min(),z.max()]
		rrange = [r.min(),r.max()]
		
def drawAxisLimit():
	ax.set_xlim(zrange)
	ax.set_ylim(rrange)


def zoomViewport(zoomf):
	global zrange,rrange
	dr = (rrange[1]-rrange[0])*zoomf
	dz = (zrange[1]-zrange[0])*zoomf
	setViewport(zrange[0]-dr,zrange[1]+dz,rrange[0]-dr,rrange[1]+dr)

def panViewport(fz,fr):
	global zrange,rrange
	dr = (rrange[1]-rrange[0])*fr
	dz = (zrange[1]-zrange[0])*fz
	setViewport(zrange[0]+dz,zrange[1]+dz,rrange[0]+dr,rrange[1]+dr)

def centerViewport(zc,rc):
	global zrange,rrange
	dr = rc-0.5*(rrange[1]+rrange[0])
	dz = zc-0.5*(zrange[1]+zrange[0])
	setViewport(zrange[0]+dz,zrange[1]+dz,rrange[0]+dr,rrange[1]+dr)

def setEqualScales():
	global fig
	global zrange,rrange
# 	print plt.getp(fig.gca().axes)
# 	print fig.gca().axes.get_position()
	dr = (rrange[1]-rrange[0])
	dz = (zrange[1]-zrange[0])
	
	ax = fig.gca().axes 
	b = ax.get_position() # ax bounding box
	b = b.transformed(fig.transFigure) # transform for fig coords to display coords
# 	print b
# 	print b.transformed(ax.transData)
# 	print b.transformed(fig.transFigure)
# 	b = Bbox.from_extents(ax.get_xlim()[0],ax.get_ylim()[0],ax.get_xlim()[1],ax.get_ylim()[1]).transformed(ax.transData)
# 	print b
	rc = 0.5*(rrange[1]+rrange[0])
	zc = 0.5*(zrange[1]+zrange[0])
	if b.width >= b.height :
		delta = dr * b.width / b.height
		setViewport(zc-delta/2,zc+delta/2,rrange[0],rrange[1])
	else:
		delta = dz / b.width * b.height
		setViewport(zrange[0],zrange[1],rc-delta/2,rc+delta/2)

def drawFilledColorMesh():
	import matplotlib.cm as cm
	global ax,fc, counter
	if 'counter' in globals():
		counter +=1
		counter = counter%5
	else:
		counter = 1
	print 'counter >>>',counter

 	if counter == 1:
 		ax.pcolor(r,z,rho, shading='gourand', edgecolors=fc, cmap=cm.jet) #,lw=0.005) #,cmap=cm.get_cmap('myrainbow')) 
 	elif counter == 2:
 		ax.pcolor(r,z,ti, shading='gourand', edgecolors=fc, cmap=cm.jet) #,lw=0.005) #,cmap=cm.get_cmap('myrainbow')) 
 	elif counter == 3:
 		ax.pcolor(r,z,te, shading='gourand', edgecolors=fc, cmap=cm.jet) #,lw=0.005) #,cmap=cm.get_cmap('myrainbow')) 
 	elif counter == 4:
 		ax.pcolor(r,z,p, shading='gourand', edgecolors=fc, cmap=cm.jet) #,lw=0.005) #,cmap=cm.get_cmap('myrainbow')) 
 	
	
def registerRainbowCT():
	import matplotlib.colors as col
	import matplotlib.cm as cm
	colors=((0.000000,0.000000,0.000000),(0.015686,0.000000,0.011765),(0.035294,0.000000,0.027451),(0.050980,0.000000,0.039216),(0.070588,0.000000,0.054902),(0.086275,0.000000,0.074510),(0.105882,0.000000,0.090196),(0.121569,0.000000,0.109804),(0.141176,0.000000,0.125490),(0.156863,0.000000,0.149020),(0.176471,0.000000,0.168627),(0.196078,0.000000,0.188235),(0.211765,0.000000,0.207843),(0.227451,0.000000,0.231373),(0.239216,0.000000,0.247059),(0.250980,0.000000,0.266667),(0.266667,0.000000,0.282353),(0.270588,0.000000,0.301961),(0.282353,0.000000,0.317647),(0.290196,0.000000,0.337255),(0.301961,0.000000,0.356863),(0.309804,0.000000,0.372549),(0.313725,0.000000,0.392157),(0.321569,0.000000,0.407843),(0.325490,0.000000,0.427451),(0.333333,0.000000,0.443137),(0.329412,0.000000,0.462745),(0.337255,0.000000,0.478431),(0.341176,0.000000,0.498039),(0.345098,0.000000,0.517647),(0.337255,0.000000,0.533333),(0.341176,0.000000,0.552941),(0.341176,0.000000,0.568627),(0.341176,0.000000,0.588235),(0.333333,0.000000,0.603922),(0.329412,0.000000,0.623529),(0.329412,0.000000,0.639216),(0.329412,0.000000,0.658824),(0.325490,0.000000,0.678431),(0.309804,0.000000,0.694118),(0.305882,0.000000,0.713725),(0.301961,0.000000,0.729412),(0.298039,0.000000,0.749020),(0.278431,0.000000,0.764706),(0.274510,0.000000,0.784314),(0.266667,0.000000,0.800000),(0.258824,0.000000,0.819608),(0.235294,0.000000,0.839216),(0.227451,0.000000,0.854902),(0.215686,0.000000,0.874510),(0.207843,0.000000,0.890196),(0.180392,0.000000,0.909804),(0.168627,0.000000,0.925490),(0.156863,0.000000,0.945098),(0.141176,0.000000,0.960784),(0.129412,0.000000,0.980392),(0.098039,0.000000,1.000000),(0.082353,0.000000,1.000000),(0.062745,0.000000,1.000000),(0.047059,0.000000,1.000000),(0.015686,0.000000,1.000000),(0.000000,0.000000,1.000000),(0.000000,0.015686,1.000000),(0.000000,0.031373,1.000000),(0.000000,0.062745,1.000000),(0.000000,0.082353,1.000000),(0.000000,0.098039,1.000000),(0.000000,0.113725,1.000000),(0.000000,0.149020,1.000000),(0.000000,0.164706,1.000000),(0.000000,0.180392,1.000000),(0.000000,0.200000,1.000000),(0.000000,0.215686,1.000000),(0.000000,0.247059,1.000000),(0.000000,0.262745,1.000000),(0.000000,0.282353,1.000000),(0.000000,0.298039,1.000000),(0.000000,0.329412,1.000000),(0.000000,0.349020,1.000000),(0.000000,0.364706,1.000000),(0.000000,0.380392,1.000000),(0.000000,0.415686,1.000000),(0.000000,0.431373,1.000000),(0.000000,0.447059,1.000000),(0.000000,0.466667,1.000000),(0.000000,0.498039,1.000000),(0.000000,0.513725,1.000000),(0.000000,0.529412,1.000000),(0.000000,0.549020,1.000000),(0.000000,0.564706,1.000000),(0.000000,0.596078,1.000000),(0.000000,0.615686,1.000000),(0.000000,0.631373,1.000000),(0.000000,0.647059,1.000000),(0.000000,0.682353,1.000000),(0.000000,0.698039,1.000000),(0.000000,0.713725,1.000000),(0.000000,0.733333,1.000000),(0.000000,0.764706,1.000000),(0.000000,0.780392,1.000000),(0.000000,0.796078,1.000000),(0.000000,0.815686,1.000000),(0.000000,0.847059,1.000000),(0.000000,0.862745,1.000000),(0.000000,0.882353,1.000000),(0.000000,0.898039,1.000000),(0.000000,0.913725,1.000000),(0.000000,0.949020,1.000000),(0.000000,0.964706,1.000000),(0.000000,0.980392,1.000000),(0.000000,1.000000,1.000000),(0.000000,1.000000,0.964706),(0.000000,1.000000,0.949020),(0.000000,1.000000,0.933333),(0.000000,1.000000,0.913725),(0.000000,1.000000,0.882353),(0.000000,1.000000,0.862745),(0.000000,1.000000,0.847059),(0.000000,1.000000,0.831373),(0.000000,1.000000,0.796078),(0.000000,1.000000,0.780392),(0.000000,1.000000,0.764706),(0.000000,1.000000,0.749020),(0.000000,1.000000,0.733333),(0.000000,1.000000,0.698039),(0.000000,1.000000,0.682353),(0.000000,1.000000,0.666667),(0.000000,1.000000,0.647059),(0.000000,1.000000,0.615686),(0.000000,1.000000,0.596078),(0.000000,1.000000,0.580392),(0.000000,1.000000,0.564706),(0.000000,1.000000,0.529412),(0.000000,1.000000,0.513725),(0.000000,1.000000,0.498039),(0.000000,1.000000,0.482353),(0.000000,1.000000,0.447059),(0.000000,1.000000,0.431373),(0.000000,1.000000,0.415686),(0.000000,1.000000,0.400000),(0.000000,1.000000,0.380392),(0.000000,1.000000,0.349020),(0.000000,1.000000,0.329412),(0.000000,1.000000,0.313725),(0.000000,1.000000,0.298039),(0.000000,1.000000,0.262745),(0.000000,1.000000,0.247059),(0.000000,1.000000,0.231373),(0.000000,1.000000,0.215686),(0.000000,1.000000,0.180392),(0.000000,1.000000,0.164706),(0.000000,1.000000,0.149020),(0.000000,1.000000,0.133333),(0.000000,1.000000,0.098039),(0.000000,1.000000,0.082353),(0.000000,1.000000,0.062745),(0.000000,1.000000,0.047059),(0.000000,1.000000,0.031373),(0.000000,1.000000,0.000000),(0.015686,1.000000,0.000000),(0.031373,1.000000,0.000000),(0.047059,1.000000,0.000000),(0.082353,1.000000,0.000000),(0.098039,1.000000,0.000000),(0.113725,1.000000,0.000000),(0.129412,1.000000,0.000000),(0.164706,1.000000,0.000000),(0.180392,1.000000,0.000000),(0.200000,1.000000,0.000000),(0.215686,1.000000,0.000000),(0.247059,1.000000,0.000000),(0.262745,1.000000,0.000000),(0.282353,1.000000,0.000000),(0.298039,1.000000,0.000000),(0.313725,1.000000,0.000000),(0.349020,1.000000,0.000000),(0.364706,1.000000,0.000000),(0.380392,1.000000,0.000000),(0.396078,1.000000,0.000000),(0.431373,1.000000,0.000000),(0.447059,1.000000,0.000000),(0.466667,1.000000,0.000000),(0.482353,1.000000,0.000000),(0.513725,1.000000,0.000000),(0.529412,1.000000,0.000000),(0.549020,1.000000,0.000000),(0.564706,1.000000,0.000000),(0.600000,1.000000,0.000000),(0.615686,1.000000,0.000000),(0.631373,1.000000,0.000000),(0.647059,1.000000,0.000000),(0.662745,1.000000,0.000000),(0.698039,1.000000,0.000000),(0.713725,1.000000,0.000000),(0.733333,1.000000,0.000000),(0.749020,1.000000,0.000000),(0.780392,1.000000,0.000000),(0.796078,1.000000,0.000000),(0.815686,1.000000,0.000000),(0.831373,1.000000,0.000000),(0.866667,1.000000,0.000000),(0.882353,1.000000,0.000000),(0.898039,1.000000,0.000000),(0.913725,1.000000,0.000000),(0.949020,1.000000,0.000000),(0.964706,1.000000,0.000000),(0.980392,1.000000,0.000000),(1.000000,1.000000,0.000000),(1.000000,0.980392,0.000000),(1.000000,0.949020,0.000000),(1.000000,0.933333,0.000000),(1.000000,0.913725,0.000000),(1.000000,0.898039,0.000000),(1.000000,0.866667,0.000000),(1.000000,0.847059,0.000000),(1.000000,0.831373,0.000000),(1.000000,0.815686,0.000000),(1.000000,0.780392,0.000000),(1.000000,0.764706,0.000000),(1.000000,0.749020,0.000000),(1.000000,0.733333,0.000000),(1.000000,0.698039,0.000000),(1.000000,0.682353,0.000000),(1.000000,0.666667,0.000000),(1.000000,0.647059,0.000000),(1.000000,0.631373,0.000000),(1.000000,0.600000,0.000000),(1.000000,0.580392,0.000000),(1.000000,0.564706,0.000000),(1.000000,0.549020,0.000000),(1.000000,0.513725,0.000000),(1.000000,0.498039,0.000000),(1.000000,0.482353,0.000000),(1.000000,0.466667,0.000000),(1.000000,0.431373,0.000000),(1.000000,0.415686,0.000000),(1.000000,0.400000,0.000000),(1.000000,0.380392,0.000000),(1.000000,0.349020,0.000000),(1.000000,0.333333,0.000000),(1.000000,0.313725,0.000000),(1.000000,0.298039,0.000000),(1.000000,0.282353,0.000000),(1.000000,0.247059,0.000000),(1.000000,0.231373,0.000000),(1.000000,0.215686,0.000000),(1.000000,0.200000,0.000000),(1.000000,0.164706,0.000000),(1.000000,0.149020,0.000000),(1.000000,0.133333,0.000000),(1.000000,0.113725,0.000000),(1.000000,0.082353,0.000000),(1.000000,0.066667,0.000000),(1.000000,0.047059,0.000000),(1.000000,0.031373,0.000000),(1.000000,0.000000,0.000000))
	cm.register_cmap(cmap=col.ListedColormap(colors,'myrainbow'))
	

def init():
	global lGrid,lEqualScales,lDrawColorMesh
	global bc,fc
	lGrid = False
	lEqualScales = False
	lDrawColorMesh = False
	bc = 'w'; fc = 'k'
	setViewport(-1,1,-1,1)
	registerRainbowCT()

def read_frame(dir_path,step):
	global time, NIP1, NJP1, r, z, rho, te, ti, ur, uz, tr, zs, p, imater, tetam, zsmin
	time, NIP1, NJP1, r, z, rho, te, ti, ur, uz, tr, zs, p, imater, tetam, zsmin = read_read(dir_path,step)



###--###
# main #
###--###
cid = '000'
fig = plt.figure(figsize=(6, 6))
#ax = fig.add_subplot(1,1,1)
# ax  = plt.subplot(111)
init()
while( cid is not 'q'):
	cid = fig.canvas.mpl_connect('key_press_event', onKeyPressed)
	read_frame('/Users/alberto/sims/PALS/PALS_nle_001',100)
	# replot()
# 	ax.set_xlim(zrange)
# 	ax.set_ylim(rrange)
	drawFilledColorMesh()
	setAxisLimit()
	drawAxisLimit()
	# replot()
	plt.show()










